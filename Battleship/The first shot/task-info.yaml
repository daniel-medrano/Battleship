type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should report an error " +
                        "if there is an input mistake. " +
                        "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("A1");
            checkShot(getFieldMatrix(output), "A1", output);

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should report an error " +
                        "if there is an input mistake. " +
                        "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output) || !output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("E4");
            checkMissing(getFieldMatrix(output), "E4", output);

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                    "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/Tools.java
  visible: true
  text: |-
    package battleship;


    //A class with useful methods.
    class Tools {
        public static boolean hasValuesRow(String letter, String[][] arr ) {
            for (int  element = 1; element <= arr.length - 1; element++) {
                if (arr[0][element].equals(letter)) {
                    return true;
                }
            }
            return false;
        }
        public static boolean hasValuesColumn(String letter, String[][] arr ) {
            for (int element = 1; element <= arr.length - 1; element++) {
                if (arr[element][0].equals(letter)) {
                    return true;
                }
            }
            return false;
        }
        //It creates a new matrix with coordinates.
        /*
         * Structure: coordinates = {
         * {letter, num}, A2
         * {letter, num}, A6
         * }
         * */
        public static int[][] toMatrix(String letter1, String letter2, String[][] arr) {
            int[][] matrix = new int[2][2];
            //In case the string with coordinates has three elements, it would save the number with two digits: 10
            if (letter1.length() == 2)
                matrix[0][1] = Integer.parseInt(letter1.substring(1, 2));
            else
                matrix[0][1] = Integer.parseInt(letter1.substring(1, 3));
            //Makes match with an element of the column 0 and the index of that match is saved.
            for (int  e = 1; e <= arr.length - 1; e++) {
                if (arr[e][0].equals(letter1.substring(0, 1))) {
                    matrix[0][0] = e;
                }
            }
            //In case the string with coordinates has three elements, it would save the number with two digits: 10
            if (letter2.length() == 2)
                matrix[1][1] = Integer.parseInt(letter2.substring(1, 2));
            else
                matrix[1][1] = Integer.parseInt(letter2.substring(1, 3));
            for (int  e = 1; e <= arr.length - 1; e++) {
                if (arr[e][0].equals(letter2.substring(0, 1))) {
                    matrix[1][0] = e;
                }
            }
            return matrix;
        }
    }
  learner_created: true
- name: src/battleship/Battleship.java
  visible: true
  text: |-
    package battleship;

    import java.util.Scanner;

    public class Battleship {
        //Variables where the coordinates are.
        Scanner scanner = new Scanner(System.in);
        String[][] field = new String[11][11];
        int size = field.length - 1;

        public void startBattlefield() {
            //It creates the matrix for the field.
            for (int row = 0; row <= size; row++) {
                for (int i = 0; i <= size; i++) {
                    if (row == 0 && i != 0) {
                        field[0][i] = String.valueOf(i);
                    } else if (i == 0 && row != 0) {
                        field[row][i] = String.valueOf((char) (row + 64));
                    } else {
                        //This part is for the coordinates (0, 0)
                        field[row][i] = row == 0 ? null: "~";
                    }
                }
                System.out.println();
            }
        }

        public void printField() {
            //Prints the field to the user. Every time the user places a new ship in the matrix, the field is printed again.
            for (int row = 0; row <= size; row++) {
                for (int i = 0; i <= size; i++) {
                    if (field[row][i] == null) {
                        System.out.print(" ");
                    } else if (i == 0 && row != 0){
                        System.out.print(field[row][i]);
                    } else {
                        System.out.print(" " + field[row][i]);
                    }
                }
                System.out.println();
            }
        }

        public void printShip(Ship ship) {
            int constant;
            int min;
            int max;
            if (ship.sign == 1) {
                constant = ship.coordinates[0][0];
                if (ship.coordinates[0][1] < ship.coordinates[1][1]) {
                    min = ship.coordinates[0][1];
                    max = ship.coordinates[1][1];
                } else {
                    min = ship.coordinates[1][1];
                    max = ship.coordinates[0][1];
                }
                for (int c = min; c <= max; c++ ) {
                    field[constant][c] = "O";
                }
            } else if (ship.sign == 2) {
                constant = ship.coordinates[0][1];
                if (ship.coordinates[0][0] < ship.coordinates[1][0]) {
                    min = ship.coordinates[0][0];
                    max = ship.coordinates[1][0];
                } else {
                    min = ship.coordinates[1][0];
                    max = ship.coordinates[0][0];
                }
                for (int c = min; c <= max; c++ ) {
                    field[c][constant] = "O";
                }
            }
        }
        public void placeShips(Ship ship) {
            System.out.printf("Enter the coordinates of the %s (%d cells): ", ship.name, ship.cells);
            do {
                askForCoordinates(ship);
            } while (ship.sign == 0);
            printShip(ship);
        }
        //This method checks if you wanna place a ship to close from another
        public boolean checkZone(int[][] coordinates, int horiOrVerti) {
            int constant;
            int min;
            int max;
            //If horiOrVerti is 1, that means that the ship to be revise is horizontal.
            if (horiOrVerti == 1) {
                constant = coordinates[0][0];
                if (coordinates[0][1] < coordinates[1][1]) {
                    min = coordinates[0][1];
                    max = coordinates[1][1];
                } else {
                    min = coordinates[1][1];
                    max = coordinates[0][1];
                }
                //This for revises if there are any circles around the ship to be placed. This is for the horizontal.
                for (int c = min; c <= max; c++ ) {
                    //The letter Z indicates zone
                    if (min != 1) {
                        //This part revises if there´s an "O" in ZOOOO
                        if (field[constant][min - 1] == "O") {
                            return false;
                        }
                    }
                    if (max != 10) {
                        //This part revises if there´s an "O" in OOOOZ
                        if (field[constant][max + 1] == "O") {
                            return false;
                        }
                    }
                    if (constant != 10) {
                        //Revises if there are any other ships  or "O´s" under the ship.
                        if (field[constant + 1][c] == "O") {
                            return false;
                        }
                    }
                    if (constant != 1) {
                        //Revises if there are any other ships or "O´s" above the ship.
                        if (field[constant - 1][c] == "O") {
                            return false;
                        }
                    }
                }
            //If horiOrVerti is 2, that means that the ship to be revise is vertical.
            } else if (horiOrVerti == 2) {
                constant = coordinates[0][1];
                if (coordinates[0][0] < coordinates[1][0]) {
                    min = coordinates[0][0];
                    max = coordinates[1][0];
                } else {
                    min = coordinates[1][0];
                    max = coordinates[0][0];
                }
                for (int c = min; c <= max; c++ ) {
                    if (min != 1) {
                        if (field[min - 1][constant] == "O") {
                            return false;
                        }
                    }
                    if (max != 10) {
                        if (field[max + 1][constant] == "O") {
                            return false;
                        }
                    }
                    if (constant != 10) {
                        //Revises if there are any other ships  or "O´s" under the ship.
                        if (field[c][constant + 1] == "O") {
                            return false;
                        }
                    }
                    if (constant != 1) {
                        //Revises if there are any other ships or "O´s" above the ship.
                        if (field[c][constant - 1] == "O") {
                            return false;
                        }
                    }
                }
            }
            //If it goes through the filter it returns a true.
            return true;
        }

        public void askForCoordinates(Ship ship) {
            int[][] coordinates;
            //Requests the values
            int horiOrVerti;
            String coor1 = scanner.next();
            String coor2 = scanner.next();
            //Verifies if the coordinates are in range.
            boolean inRange = (Tools.hasValuesColumn(coor1.substring(0,1), field) && Tools.hasValuesColumn(coor2.substring(0, 1), field)) && (Tools.hasValuesRow(coor1.substring(1,2), field) && Tools.hasValuesRow(coor2.substring(1, 2), field));
            if (inRange) {
                //With the method toMatrix the coordinates like F3 and F7 are converted to numbers like (6,3) and (6,7)
                coordinates = Tools.toMatrix(coor1, coor2, field);
                int difference1 = Math.abs(coordinates[0][0] - coordinates[1][0]);
                int difference2 = Math.abs(coordinates[0][1] - coordinates[1][1]);
                //This if avoids the ship from being diagonal, because both of the values of the input must have a common values, either the letter or the num, and when they´re subtracted one of the values should be 0
                if (difference1 == 0 && (difference2 + 1 == ship.cells)) {
                    //Points out that the ship will be horizontal.
                    horiOrVerti = 1;
                    if (checkZone(coordinates, horiOrVerti)) {
                        ship.sign = 1;
                        ship.coordinates = coordinates;
                    } else {
                        System.out.println("Error! You placed it too close to another one. Try again: ");
                    }
                } else if (difference2 == 0 && (difference1 + 1 == ship.cells)) {
                    //Points out that the ship will be vertical.
                    horiOrVerti = 2;
                    if (checkZone(coordinates, horiOrVerti)) {
                        ship.sign = 2;
                        ship.coordinates = coordinates;
                    } else {
                        System.out.println("Error! You placed it too close to another one. Try again: ");
                    }
                } else {
                    System.out.println("Error! Wrong ship location! Try again:");
                }
            } else {
                System.out.println("Not a valid input");
            }
        }
    }

    class Ship {
        String name;
        int cells;
        int sign = 0;
        int[][] coordinates;
        Ship(int cells, String name) {
            this.name = name;
            this.cells = cells;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/664/implement#comment
status: Unchecked
record: -1
